// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InvitationStatus {
  pending
  accepted
  rejected
}

enum PrivacyStatus {
  public
  private
}

enum MeetingLanguage {
  English
  Arabic
}

enum FriendshipStatus {
  pending
  accepted
}

enum NotificationType {
  meetingInvitation
  meetingReminder
  meetingUpdated
  meetingCanceled
  meetingInvitationAccepted
  meetingInvitationRejected
  friendshipRequest
  friendshipAccepted
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  name                 String
  password             String
  passwordChangedAt    DateTime       @default(now())
  passwordResetToken   String?        @unique
  passwordResetExpires DateTime?
  avatar               String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  meetings             Meeting[]      @relation("MeetingParticipants")
  adminMeetings        Meeting[]      @relation("AdminMeeting")
  Invitation           Invitation[]
  friendsOf            Friendship[]   @relation("FriendshipsOf")
  friendsTo            Friendship[]   @relation("FriendshipsTo")
  blockedUsers         User[]         @relation("BlockedUsers")
  blockedBy            User[]         @relation("BlockedUsers")
  Notifications        Notification[]
  notifyEmail          Boolean        @default(true)
  remindersViaEmail    Boolean        @default(true)
  bio                  String?
  location             String?
  active               Boolean        @default(false)
  emailActivationToken String?
  Message              Message[]
  ratings               Rating[]
}

model Friendship {
  id        String           @id @default(uuid())
  user1     User             @relation("FriendshipsOf", fields: [user1Id], references: [id])
  user1Id   String
  user2     User             @relation("FriendshipsTo", fields: [user2Id], references: [id])
  user2Id   String
  status    FriendshipStatus @default(pending)
  createdAt DateTime         @default(now())
}

model Meeting {
  id                String          @id @default(uuid())
  title             String
  description       String?
  activityFlag      String
  conferenceId      String          @unique
  startTime         DateTime        @default(now())
  saveConversation  Boolean         @default(true)
  enableInterpreter Boolean         @default(false)
  enableAvatar      Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  participants      User[]          @relation("MeetingParticipants")
  organizer         User            @relation("AdminMeeting", fields: [organizerId], references: [id])
  organizerId       String
  token             String?
  privacyStatus     PrivacyStatus   @default(public)
  Invitation        Invitation[]
  language          MeetingLanguage @default(English)
  messages          Message[]
  password          String?
  ratings            Rating[]
}

model Invitation {
  id        String           @id @default(uuid())
  userId    String
  meetingId String
  status    InvitationStatus @default(pending)
  meeting   Meeting          @relation(fields: [meetingId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  badge     String?
  user      User             @relation(fields: [userId], references: [id])
}

model Message {
  id            String   @id @default(uuid())
  content       String
  senderId      String
  sender        User     @relation(fields: [senderId], references: [id])
  isInterpreted Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  meeting       Meeting  @relation(fields: [meetingId], references: [id])
  meetingId     String
}

model Rating {
  id        String   @id @default(uuid())
  userId    String
  meetingId String
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
